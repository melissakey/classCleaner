// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bayesian_prob
NumericVector bayesian_prob(const CharacterVector& assignment, const NumericMatrix& D, std::string k, int B, std::string prior);
RcppExport SEXP _classCleaner_bayesian_prob(SEXP assignmentSEXP, SEXP DSEXP, SEXP kSEXP, SEXP BSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type assignment(assignmentSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type D(DSEXP);
    Rcpp::traits::input_parameter< std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< std::string >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(bayesian_prob(assignment, D, k, B, prior));
    return rcpp_result_gen;
END_RCPP
}
// empirical_prob
NumericVector empirical_prob(const CharacterVector& assignment, const NumericMatrix& D, std::string k);
RcppExport SEXP _classCleaner_empirical_prob(SEXP assignmentSEXP, SEXP DSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type assignment(assignmentSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type D(DSEXP);
    Rcpp::traits::input_parameter< std::string >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(empirical_prob(assignment, D, k));
    return rcpp_result_gen;
END_RCPP
}
// identify_outliers
DataFrame identify_outliers(const CharacterVector& assignment, const NumericMatrix& D, int B, int min_group_size, std::string prior, const CharacterVector& labels, bool display_progress);
RcppExport SEXP _classCleaner_identify_outliers(SEXP assignmentSEXP, SEXP DSEXP, SEXP BSEXP, SEXP min_group_sizeSEXP, SEXP priorSEXP, SEXP labelsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type assignment(assignmentSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type min_group_size(min_group_sizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_outliers(assignment, D, B, min_group_size, prior, labels, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// test
arma::mat test(const arma::vec& vec1);
RcppExport SEXP _classCleaner_test(SEXP vec1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type vec1(vec1SEXP);
    rcpp_result_gen = Rcpp::wrap(test(vec1));
    return rcpp_result_gen;
END_RCPP
}
// sim_by_class
arma::mat sim_by_class(arma::uword n, const arma::uvec& Nk, const arma::colvec& s, double tau, const arma::mat& rho);
RcppExport SEXP _classCleaner_sim_by_class(SEXP nSEXP, SEXP NkSEXP, SEXP sSEXP, SEXP tauSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_by_class(n, Nk, s, tau, rho));
    return rcpp_result_gen;
END_RCPP
}
// sim_by_instance
arma::mat sim_by_instance(arma::uword n, const arma::uvec& Nk, const arma::vec& s, const arma::mat& rho);
RcppExport SEXP _classCleaner_sim_by_instance(SEXP nSEXP, SEXP NkSEXP, SEXP sSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_by_instance(n, Nk, s, rho));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_classCleaner_bayesian_prob", (DL_FUNC) &_classCleaner_bayesian_prob, 5},
    {"_classCleaner_empirical_prob", (DL_FUNC) &_classCleaner_empirical_prob, 3},
    {"_classCleaner_identify_outliers", (DL_FUNC) &_classCleaner_identify_outliers, 7},
    {"_classCleaner_test", (DL_FUNC) &_classCleaner_test, 1},
    {"_classCleaner_sim_by_class", (DL_FUNC) &_classCleaner_sim_by_class, 5},
    {"_classCleaner_sim_by_instance", (DL_FUNC) &_classCleaner_sim_by_instance, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_classCleaner(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
